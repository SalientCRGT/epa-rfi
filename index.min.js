var ngapp=angular.module("ngapp",["ngRoute","ngResource","ngAnimate"]);ngapp.config(["$routeProvider","$resourceProvider",function(e,r){function a(e,r,a){var s=angular.fromJson(e),t=s.data||{};return t.$code=s.code,t.$msg=s.msg,t}function s(e,r,a){var s=angular.fromJson(e),t=s.data||[];return t.$code=s.code,t.$msg=s.msg,t.$pages=s.pages,t}function t(e){return console.log("responseInterceptor",e),e.resource.$code=e.data.$code,e.resource.$msg=e.data.$msg,e.resource.$pages=e.data.$pages,e.resource}e.when("/",{templateUrl:"ngapp/search/search.html",controller:"SearchCtrl"}).when("/developer",{templateUrl:"ngapp/developer/developer.html"}).otherwise({redirectTo:"/"}),r.defaults.actions={get:{method:"GET",params:{id:"@registryId"},transformResponse:a},query:{method:"GET",isArray:!0,transformResponse:s,interceptor:{response:t}}}}]),ngapp.factory("FacilityResource",["$resource",function(e){return e("/api/facilities/:id",{page:1,pageSize:50})}]),ngapp.controller("SearchCtrl",["$scope","$http","FacilityResource","$timeout",function(e,r,a,s){e.pager={pageSize:50},e.pages=[],e.search=function(r){if(!(0==r||r>e.pages[e.pages.length-1])){e.pager.page=r||1,e.pages=[];for(var s in e.searchParameters)(null===e.searchParameters[s]||""===e.searchParameters[s])&&delete e.searchParameters[s];e.facilities=a.query(angular.extend({},e.searchParameters,e.pager)),e.facilities.$promise.then(function(r){if(r.$pages-e.pager.page<2)for(var a=r.$pages;a>1&&e.pages.length<5;a--)e.pages.unshift(a);else for(var a=Math.max(e.pager.page-2,1);a<=r.$pages&&e.pages.length<5;a++)e.pages.push(a)})}},e.search(),e.toggleForm=function(){e.searchParameters={},$("form").collapse("toggle")}}]);
//# sourceMappingURL=data:application/json;base64,
