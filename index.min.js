var ngapp=angular.module("ngapp",["ngRoute","ngResource","ngAnimate"]);ngapp.config(["$routeProvider","$resourceProvider",function(a,e){function r(a,e,r){var n=angular.fromJson(a),t=n.data||{};return Object.getOwnPropertyNames(n).forEach(function(a){"data"!==a&&(t["$"+a]=n[a])}),t}function n(a,e,r){var n=angular.fromJson(a),t=n.data||[];return Object.getOwnPropertyNames(n).forEach(function(a){"data"!==a&&(t["$"+a]=n[a])}),t}function t(a){return Object.getOwnPropertyNames(a.data).forEach(function(e){"$"===e.substring(0,1)&&(a.resource[e]=a.data[e])}),a.resource}a.when("/",{templateUrl:"ngapp/search/search.html",controller:"SearchCtrl"}).when("/developer",{templateUrl:"ngapp/developer/developer.html"}).otherwise({redirectTo:"/"}),e.defaults.actions={get:{method:"GET",params:{id:"@registryId"},transformResponse:r},query:{method:"GET",isArray:!0,transformResponse:n,interceptor:{response:t}}}}]),ngapp.factory("FacilityResource",["$resource",function(a){return a("/api/facilities/:id",{page:1,pageSize:50})}]),ngapp.factory("UpdateResource",["$resource",function(a){return a("/api/files")}]),ngapp.controller("SearchCtrl",["$scope","$http","FacilityResource","UpdateResource","$timeout","$location","$httpParamSerializerJQLike",function(a,e,r,n,t,s,o){function i(e){var r={};for(var n in a.searchParameters){if(null===a.searchParameters[n]||""===a.searchParameters[n]){delete a.searchParameters[n];break}if("q"==n){var t=a.searchParameters[n];r[n]=t.replace(/\s+/g,"|");break}r[n]=a.searchParameters[n]}return e?angular.extend({},r,a.pager):r}a.pager={pageSize:10},a.pages=[],a.state="-1",a.search=function(e){0===e||e>a.pages[a.pages.length-1]||(a.pager.page=e||1,a.pages=[],a.facilities=r.query(i(!0)),a.facilities.$promise.then(function(e){var r;if(e.$pages-a.pager.page<2)for(r=e.$pages;r>1&&a.pages.length<5;r--)a.pages.unshift(r);else for(r=Math.max(a.pager.page-2,1);r<=e.$pages&&a.pages.length<5;r++)a.pages.push(r)}))},a.search(),a.update=function(e){var r={};r.type="FRS",r.subtype=e,a.updated=n.query(r),a.updated.$promise.then(function(){a.search(1)})},a.toggleForm=function(a,e){$(e).hasClass("in")||($(".alert.alert-success").removeClass("alert-success").addClass("alert-warning"),$(a).removeClass("alert-warning").addClass("alert-success"),$("#toggler .collapse").collapse("hide"),$(e).collapse("show"),"#toggleUpdate"==e?($("#data-table").hide(),$("#data-info").show()):($("#data-table").show(),$("#data-info").hide()))},a.requestUrl=function(){return s.protocol()+"://"+s.host()+"/api/facilities?"+o(i(!1))},a.statesLoaded=function(){},$(".alert-instruct").hover(function(){$(this).addClass("highlight")},function(){$(this).removeClass("highlight")}),$("#data-table").hide(),a.states=[{name:"--Choose State--",abbr:"-1"},{name:"Alabama",abbr:"AL"},{name:"Alaska",abbr:"AK"},{name:"Arizona",abbr:"AZ"},{name:"Arkansas",abbr:"AR"},{name:"California",abbr:"CA"},{name:"Colorado",abbr:"CO"},{name:"Connecticut",abbr:"CT"},{name:"Delaware",abbr:"DE"},{name:"Florida",abbr:"FL"},{name:"Georgia",abbr:"GA"},{name:"Hawaii",abbr:"HI"},{name:"Idaho",abbr:"ID"},{name:"Illinois",abbr:"IL"},{name:"Indiana",abbr:"IN"},{name:"Iowa",abbr:"IA"},{name:"Kansas",abbr:"KS"},{name:"Kentucky",abbr:"KY"},{name:"Louisiana",abbr:"LA"},{name:"Maine",abbr:"ME"},{name:"Maryland",abbr:"MD"},{name:"Massachusetts",abbr:"MA"},{name:"Michigan",abbr:"MI"},{name:"Minnesota",abbr:"MN"},{name:"Mississippi",abbr:"MS"},{name:"Missouri",abbr:"MO"},{name:"Montana",abbr:"MT"},{name:"Nebraska",abbr:"NE"},{name:"Nevada",abbr:"NV"},{name:"New Hampshire",abbr:"NH"},{name:"New Jersey",abbr:"NJ"},{name:"New Mexico",abbr:"NM"},{name:"New York",abbr:"NY"},{name:"North Carolina",abbr:"NC"},{name:"North Dakota",abbr:"ND"},{name:"Ohio",abbr:"OH"},{name:"Oklahoma",abbr:"OK"},{name:"Oregon",abbr:"OR"},{name:"Pennsylvania",abbr:"PA"},{name:"Rhode Island",abbr:"RI"},{name:"South Carolina",abbr:"SC"},{name:"South Dakota",abbr:"SD"},{name:"Tennessee",abbr:"TN"},{name:"Texas",abbr:"TX"},{name:"Utah",abbr:"UT"},{name:"Vermont",abbr:"VT"},{name:"Virginia",abbr:"VA"},{name:"Washington",abbr:"WA"},{name:"West Virginia",abbr:"WV"},{name:"Wisconsin",abbr:"WI"},{name:"Wyoming",abbr:"WY"}]}]);
//# sourceMappingURL=data:application/json;base64,
