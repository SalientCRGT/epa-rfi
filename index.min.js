var ngapp=angular.module("ngapp",["ngRoute","ngResource","ngAnimate"]);ngapp.config(["$routeProvider","$resourceProvider",function(e,r){function a(e,r,a){var t=angular.fromJson(e),n=t.data||{};return Object.getOwnPropertyNames(t).forEach(function(e){"data"!==e&&(n["$"+e]=t[e])}),n}function t(e,r,a){var t=angular.fromJson(e),n=t.data||[];return Object.getOwnPropertyNames(t).forEach(function(e){"data"!==e&&(n["$"+e]=t[e])}),n}function n(e){return Object.getOwnPropertyNames(e.data).forEach(function(r){"$"===r.substring(0,1)&&(e.resource[r]=e.data[r])}),e.resource}e.when("/search",{templateUrl:"ngapp/search/search.html",controller:"SearchCtrl"}).when("/",{templateUrl:"ngapp/developer/developer.html"}).otherwise({redirectTo:"/"}),r.defaults.actions={get:{method:"GET",params:{id:"@registryId"},transformResponse:a},query:{method:"GET",isArray:!0,transformResponse:t,interceptor:{response:n}}}}]),ngapp.factory("FacilityResource",["$resource",function(e){return e("/api/facilities/:id",{page:1,pageSize:50})}]),ngapp.controller("SearchCtrl",["$scope","$http","FacilityResource","$timeout","$location","$httpParamSerializerJQLike",function(e,r,a,t,n,o){function s(){for(var r in e.searchParameters)(null===e.searchParameters[r]||""===e.searchParameters[r])&&delete e.searchParameters[r];var a=angular.extend({},e.searchParameters,e.pager);return a}e.pager={pageSize:50},e.pages=[],e.search=function(r){0===r||r>e.pages[e.pages.length-1]||(e.pager.page=r||1,e.pages=[],e.facilities=a.query(s()),e.facilities.$promise.then(function(r){var a;if(r.$pages-e.pager.page<2)for(a=r.$pages;a>1&&e.pages.length<5;a--)e.pages.unshift(a);else for(a=Math.max(e.pager.page-2,1);a<=r.$pages&&e.pages.length<5;a++)e.pages.push(a)}))},e.search(),e.update=function(){r({method:"GET",url:"/api/files?type=FRS&subtype=VA"}).then(function(e){},function(e){})},e.toggleForm=function(){e.searchParameters={},$("form").collapse("toggle")},e.requestUrl=function(){return n.protocol()+"://"+n.host()+"/api/facilities?"+o(s())}}]);
//# sourceMappingURL=data:application/json;base64,
